defmodule Solution02 do

  @moduledoc """
      Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

      By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
  """
def solve do
  fib() # Get fib
  |> Stream.take_while(&(&1 < 4_000_000)) # Take all values under 4 million
  |> Enum.reduce(0, &sum_even/2) # Sum all the even values into one value
end

# Produces an infinite stream of fibonacci
def fib() do
  # next_acc, next_func
  # Start at a = 1 and b = 1
  # take a
  # set b = a + b
  # Set a = b
  # First iteration should be [ 1, 1 + 1 ] => [ 1, 2 ]
  # Second would be [ 2, 2 + 1] => [ 1, 2, 3 ]
  # Third would be [ 3, 3 + 2] => [ 1, 2, 3, 5 ]
  # ...
  Stream.unfold({ 1, 1 }, fn { a, b } -> { a, { b, a + b } } end)
end

# If even, adds, if not returns the accumulator
def sum_even(num, acc) do
  if rem(num, 2) == 0, do: acc + num, else: acc
end

end

{time, result} = :timer.tc(fn -> Solution03.solve() end)
IO.puts(result) # 4613732
IO.puts("#{time / 1000} ms") # 2.681 ms
